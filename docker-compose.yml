name: DaniloSantanaRB2025

services:

  load-balancer:
    container_name: load-balancer
    image: nginx:latest
    ports:
      - "9999:9999"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api-1
      - api-2
    networks:
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.4"
          memory: "40MB"

  api-1: &api-service
    container_name: api-1
    build: .
    #image: danilosantanaaa/rinha:2025.2
    expose:
      - "8080"
    ports:
      - "3001:8080"
    hostname: api-1
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_URLS=http://+:8080
      - ConnectionStrings__Redis=redis:6379,abortConnect=false
      - ConnectionStrings__PostgreSQL=User Id=postgres;Password=postgres;Server=postgreSQL;Port=5432;Database=rinha
      - PaymentProcessorDefault=http://payment-processor-default:8080
      - PaymentProcessorFallback=http://payment-processor-fallback:8080
    depends_on:
      - postgreSQL
      - redis
    networks:
      - backend
      - payment-processor
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "95MB"
  api-2:
    <<: *api-service
    container_name: api-2
    ports:
      - "3002:8080"
    hostname: api-2
    
  redis:
    container_name: cache
    hostname: redis
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - backend
    volumes:
      - redis_data:/data
    restart: always
    deploy:
      resources:
        limits:
          cpus: "0.2"
          memory: "20MB"

  postgreSQL:
    container_name: database
    hostname: postgreSQL
    image: postgres:17-alpine
    networks:
      - backend
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=rinha
    ports:
      - "5432:5432"
    command: >
      postgres
      -c fsync=off
      -c work_mem=64MB
      -c synchronous_commit=off
      -c wal_level=minimal
      -c max_wal_senders=0
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres -d rinha" ]
      interval: 5s
      timeout: 3s
      retries: 10
    deploy:
      resources:
        limits:
          cpus: "0.3"
          memory: "100MB"

  # Serviço de monitoramentos e métricas
  pgadmin:
    image: dpage/pgadmin4:latest
    restart: always
    entrypoint: > # Before the entrypoint phase, just need to set owner and permissions for the pgpass file.
      /bin/sh -c "
      cp -f /pgadmin4/pgpass /var/lib/pgadmin/;
      chmod 600 /var/lib/pgadmin/pgpass;
      chown pgadmin:pgadmin /var/lib/pgadmin/pgpass;
      /entrypoint.sh
      "
    ports:
      - "8888:80"
    environment:
      PGADMIN_DEFAULT_EMAIL: danilosantana@gmail.com
      PGADMIN_DEFAULT_PASSWORD: danilo123
      PGADMIN_CONFIG_SERVER_MODE: "False"
      PGADMIN_CONFIG_MASTER_PASSWORD_REQUIRED: "False"
    volumes:
      - ./config/servers.json:/pgadmin4/servers.json
      - ./config/pgpass:/pgadmin4/pgpass
    networks:
      - backend
    depends_on:
      - postgreSQL

networks:
  backend:
    name: backend
    driver: bridge
    external: true
  payment-processor:
    name: payment-processor
    driver: bridge
    external: true

volumes:
  redis_data: {}